/**
 * –ö—Ä–∞—Å–∏–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
 */
class CitySelector {
    constructor(containerId, options = {}) {
        this.containerId = containerId;
        this.container = document.getElementById(containerId);
        this.options = {
            placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥...',
            popularLimit: 12,
            searchDelay: 300,
            ...options
        };
        
        this.selectedCity = null;
        this.searchTimeout = null;
        this.isDropdownOpen = false;
        
        this.init();
    }
    
    init() {
        if (!this.container) {
            console.error(`CitySelector: Container with id "${this.containerId}" not found`);
            return;
        }
        
        this.render();
        this.bindEvents();
        this.loadPopularCities();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        const savedCity = localStorage.getItem('selectedCity');
        if (savedCity) {
            try {
                this.selectedCity = JSON.parse(savedCity);
                this.updateDisplay();
            } catch (e) {
                console.error('Error parsing saved city:', e);
            }
        }
    }
    
    render() {
        this.container.innerHTML = `
            <div class="city-selector">
                <div class="city-selector__input-wrapper">
                    <input type="text" 
                           class="city-selector__input" 
                           placeholder="${this.options.placeholder}"
                           autocomplete="off">
                    <div class="city-selector__icon">üåç</div>
                </div>
                <div class="city-selector__dropdown" style="display: none;">
                    <div class="city-selector__popular">
                        <h4>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞</h4>
                        <div class="city-selector__popular-list"></div>
                    </div>
                    <div class="city-selector__search-results"></div>
                </div>
            </div>
        `;
        
        this.input = this.container.querySelector('.city-selector__input');
        this.dropdown = this.container.querySelector('.city-selector__dropdown');
        this.popularList = this.container.querySelector('.city-selector__popular-list');
        this.searchResults = this.container.querySelector('.city-selector__search-results');
    }
    
    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        this.input.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            
            if (this.searchTimeout) {
                clearTimeout(this.searchTimeout);
            }
            
            if (query.length >= 2) {
                this.searchTimeout = setTimeout(() => {
                    this.searchCities(query);
                }, this.options.searchDelay);
            } else {
                this.showPopularCities();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞
        this.input.addEventListener('focus', () => {
            this.showDropdown();
            this.showPopularCities();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        document.addEventListener('click', (e) => {
            if (!this.container.contains(e.target)) {
                this.hideDropdown();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        this.input.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.hideDropdown();
            }
        });
    }
    
    async loadPopularCities() {
        try {
            const response = await fetch(`/api/cities/popular?limit=${this.options.popularLimit}`);
            const cities = await response.json();
            
            this.popularCities = cities;
            this.showPopularCities();
        } catch (error) {
            console.error('Error loading popular cities:', error);
        }
    }
    
    showPopularCities() {
        if (!this.popularCities) return;
        
        this.popularList.innerHTML = this.popularCities.map(city => `
            <div class="city-selector__item" data-city-id="${city.id}" data-city-name="${city.name}">
                <span class="city-selector__item-name">${city.name}</span>
                <span class="city-selector__item-region">${city.region}</span>
            </div>
        `).join('');
        
        this.searchResults.innerHTML = '';
        this.bindItemEvents();
    }
    
    async searchCities(query) {
        try {
            const response = await fetch(`/api/cities/search?q=${encodeURIComponent(query)}`);
            const cities = await response.json();
            
            this.searchResults.innerHTML = cities.map(city => `
                <div class="city-selector__item" data-city-id="${city.id}" data-city-name="${city.name}">
                    <span class="city-selector__item-name">${city.name}</span>
                    <span class="city-selector__item-region">${city.region}</span>
                </div>
            `).join('');
            
            this.popularList.innerHTML = '';
            this.bindItemEvents();
        } catch (error) {
            console.error('Error searching cities:', error);
        }
    }
    
    bindItemEvents() {
        const items = this.container.querySelectorAll('.city-selector__item');
        items.forEach(item => {
            item.addEventListener('click', () => {
                const cityId = item.dataset.cityId;
                const cityName = item.dataset.cityName;
                
                this.selectCity({
                    id: parseInt(cityId),
                    name: cityName
                });
                
                this.hideDropdown();
            });
        });
    }
    
    selectCity(city) {
        this.selectedCity = city;
        this.updateDisplay();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('selectedCity', JSON.stringify(city));
        
        // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.container.dispatchEvent(new CustomEvent('citySelected', {
            detail: { city }
        }));
        
        // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if (this.containerId === 'modal-city-selector') {
            const confirmBtn = document.getElementById('confirm-city-selection');
            if (confirmBtn) {
                confirmBtn.disabled = false;
            }
        }
    }
    
    updateDisplay() {
        if (this.selectedCity) {
            this.input.value = this.selectedCity.name;
            this.input.classList.add('has-value');
        } else {
            this.input.value = '';
            this.input.classList.remove('has-value');
        }
    }
    
    showDropdown() {
        this.dropdown.style.display = 'block';
        this.isDropdownOpen = true;
    }
    
    hideDropdown() {
        this.dropdown.style.display = 'none';
        this.isDropdownOpen = false;
    }
    
    getSelectedCity() {
        return this.selectedCity;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const modalSelector = new CitySelector('modal-city-selector', {
        placeholder: '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...'
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const hasSeenCityModal = localStorage.getItem('hasSeenCityModal');
    const selectedCity = localStorage.getItem('selectedCity');
    
    if (!hasSeenCityModal && !selectedCity) {
        setTimeout(() => {
            showCityModal();
        }, 1000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const cityModal = document.getElementById('city-modal');
    const skipBtn = document.getElementById('skip-city-selection');
    const confirmBtn = document.getElementById('confirm-city-selection');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–ª–∏–∫–æ–º –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
    if (cityModal) {
        cityModal.addEventListener('click', (e) => {
            if (e.target === cityModal) {
                hideCityModal();
                localStorage.setItem('hasSeenCityModal', 'true');
            }
        });
    }
    
    if (skipBtn) {
        skipBtn.addEventListener('click', () => {
            hideCityModal();
            localStorage.setItem('hasSeenCityModal', 'true');
        });
    }
    
    if (confirmBtn) {
        confirmBtn.addEventListener('click', () => {
            const selectedCity = modalSelector.getSelectedCity();
            if (selectedCity) {
                hideCityModal();
                localStorage.setItem('hasSeenCityModal', 'true');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    modalSelector.container.addEventListener('citySelected', (e) => {
        const confirmBtn = document.getElementById('confirm-city-selection');
        if (confirmBtn) {
            confirmBtn.disabled = false;
        }
    });
});

function showCityModal() {
    const modal = document.getElementById('city-modal');
    if (modal) {
        modal.classList.add('show');
        // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        // document.body.style.overflow = 'hidden';
    }
}

function hideCityModal() {
    const modal = document.getElementById('city-modal');
    if (modal) {
        modal.classList.remove('show');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        // document.body.style.overflow = '';
    }
}

/*
 * City Selector Component
 * –í–µ—Ä—Å–∏—è: 1.7
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: –£–±—Ä–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ —à–∞–ø–∫–∏, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */ 